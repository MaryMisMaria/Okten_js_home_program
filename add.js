//- Створити клас або функцію конструктор, за допомоги якої можна створювати об'єкти наступного вигляду.
// Конструктор повинен приймати значення для кожної властивості, в т.ч і для властивостей внутрішніх об'єктів
//
// {
//     id: 1,
//     name: 'Leanne Graham',
//     username: 'Bret',
//     email: 'Sincere@april.biz',
//     address: {
//         street: 'Kulas Light',
//         suite: 'Apt. 556',
//         city: 'Gwenborough',
//         zipcode: '92998-3874',
//         geo: {
//             lat: '-37.3159',
//             lng: '81.1496'
//         }
//     },
//     phone: '1-770-736-8031 x56442',
//     website: 'hildegard.org',
//     company: {
//         name: 'Romaguera-Crona',
//         catchPhrase: 'Multi-layered client-server neural-net',
//         bs: 'harness real-time e-markets'
//     }
// }
console.log('_____________1___________');

function User(id, name, username, email, address, phone, website, company) {
    this.id = id;
    this.name = name;
    this.username = username;
    this.email = email;
    this.address = address;
    this.phone = phone;
    this.website = website;
    this.company = company;
}

let user1 = new User(1, 'Leanne Graham', 'Bret', 'Sincere@april.biz',
    {
        street: 'Kulas Light',
        suite: 'Apt. 556',
        city: 'Gwenborough',
        zipcode: '92998-3874',
        geo: {lat: '-37.3159', lng: '81.1496'}
    },
    '1-770-736-8031 x56442', 'hildegard.org', {
        name: 'Romaguera-Crona',
        catchPhrase: 'Multi-layered client-server neural-net',
        bs: 'harness real-time e-markets'
    });
console.log(user1);
//
//-  Створити функцію конструктор / клас  який описує об'єкт тегу
// Поля :
//     -назва тегу ()
// - опис його дій
// - масив з атрибутами (2-3 атрибути максимум)
// Кожен атрибут описати як окремий який буде містити
// -назву атрибуту
// -опис дії атрибуту
// інформацію брати з htmlbook.ru
//
// Таким чином описати теги
// -a
// -div
// -h1
// -span
// -input
// -form
// -option
// -select
// Приклад результуючого об'єкту
// {
//     titleOfTag: 'area',
//         action: `Каждый элемент <area> определяет активные области изображения, которые являются ссылками...`,
//     attrs: [
//     {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},
//
console.log('______2_____');

function aboutTag(titleOfTag, action, attr) {
    this.titleOfTag = titleOfTag;
    this.action = action;
    this.attr = attr;
}

let a = new aboutTag('a', 'Тег <a> является одним из важных элементов HTML и предназначен для создания с' +
    'сылок. В зависимости от присутствия атрибутов name или href тег ' +
    '<a> устанавливает ссылку или якорь. Якорем называется закладка внутри страницы, ' +
    'которую можно указать в качестве цели ссылки. При использовании ссылки, которая указывает на якорь,' +
    ' происходит переход к закладке внутри веб-страницы.', {
    titleOfTag: 'accesskey',
    rel: 'Отношения между ссылаемым и текущим документами.'
});
console.log(a);
let div = new aboutTag('div', 'Элемент <div> является блочным элементом и предназначен для выделения фрагмента документа ' +
    'с целью изменения вида содержимого. Как правило, вид блока управляется с помощью стилей. ' +
    'стилейЧтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.', {
    align: 'ЗадаетЗадает выравнивание содержимого тега',
    title: 'Добавляет всплывающую подсказку к содержимому.'
});
console.log(div);
let h1 = new aboutTag('h1', 'HTML предлагает шесть заголовков разного уровня, которые показывают относительную важность секции, расположенной после заголовка.', {align: 'ЗадаетЗадает выравнивание содержимого тега'});
console.log(h1);
let span = new aboutTag('span', 'Тег предназначен для определения строчных элементов документа.', {aboutTag: 'Для этого тега доступны универсальные атрибуты и события.'});
console.log(span);
let input = new aboutTag('input', 'Тег  является одним из разносторонних элементов формы и позволяет создавать разные элементы интерфейса и обеспечить взаимодействие с пользователем.', {
    form: 'Связывает поле с формой по её идентификатору.',
    alt: 'Альтернативный текст для кнопки с изображением.'
});
console.log(input);
let form = new aboutTag('form', 'Тег устанавливает форму на веб-странице. Форма предназначена для обмена данными между пользователем и сервером.', {
    action: 'Адрес программы или документа, который обрабатывает данные формы.',
    method: 'Метод протокола HTTP.'
});
console.log(form);
let option = new aboutTag('option', 'Тег  определяет отдельные пункты списка', {
    label: 'Указание метки пункта списка',
    value: 'Значение пункта списка, которое будет отправлено на сервер или прочитано с помощью скриптов.'
});
console.log(option);
let select = new aboutTag('select', 'Тег позволяет создать элемент интерфейса в виде раскрывающегося списка, а также список с одним или множественным выбором, как показано далее. Конечный вид зависит от использования атрибута size тега , который устанавливает высоту списка', {
    autofocus: 'Устанавливает, что список получает фокус после загрузки страницы.',
    form: 'Связывает список с формой.'
});
console.log(select);